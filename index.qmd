---
title: "HELP DOC"
format: 
  html:
     theme: darkly
editor: visual
---

Liste évolutive de commandes R / GIT / LINUX

[Github](https://github.com/gschone-data)

::: panel-tabset
## R

installation via github de packages :

``` {style="color:green"}
install.packages("remotes")
library(remotes)
remotes::install_github("inseefrlab/doremifasol")
```

CTRL + SHIFT + R : Création d'une section

code d'une fonction : tapper dans la console package::fonction (exemple : eeptools::isid)

Installation package via github :

``` {style="color:green"}
install.packages("remotes")
library(remotes)
remotes::install_github("inseefrlab/doremifasol")
```

Nettoyage environnement :

``` {style="color:green"}
rm(list=ls())
```

Connexions BDD :

``` {style="color:green"}
pg←postgres()
nomen <- postgres(dbname = "nomenclature")
personne <- postgres(dbname = "personne") 
pg_pens <- postgres(dbname = "pens")
```

liste classe / mode et type de l'ensemble des variables d'un DF :

``` {style="color:green"}
df %>% 
  lapply(function(x) c(class = class(x), mode = mode(x), type = typeof(x))) %>%  
  dplyr::bind_rows() %>%  
  mutate(element = names(df), .before = 1) 
```

Utilisation d'un texte pour appeler une variable :

``` {style="color:green"}
calculer_min_max <- function(df, variable) {
  df %>%
    summarise(n = n(), min = min({{ variable }}), max = max({{ variable }}))
}
calculer_min_max(recensement, population_totale)
```

Utilisation d'une variable texte dans une fonction : eval(parse(test=....)

```{r}
library(dplyr)
dt<-cars
test1= "dist>90L"
dt |> filter(eval(parse(text=test1)))

```

Assignation dynamique :

``` {style="color:green"}
 annee=2015
 assign(glue("var_{annee}"),3) #assign à la variable var_2015 la valeur 3
```

Fonctions diverses :

``` {style="color:green"}
str("variable") ->détail d'un dataframe ou d'une variable :
cat("a","b")-> print + paste
```

Ajout ligne total sur un data frame :

``` {style="color:green"}
rbind(tab, data.frame(var = "Total", t(colSums(tab[, -1]))))->tab
```

Rechercher NA data frame

```{r}
DT<-iris
na_count <-sapply(DT, function(y) sum(length(which(is.na(y)))))
na_count <- data.frame(na_count)

```

## Git

Fonctions de base

``` {style="color:green"}

git commit -m:"blabla"
git commit --amend -m:'update previous commit'
```

``` {style="color:green"}
git status pour voir ce qui déconne
git add #pour ajouter un fichier non indexé ensuite on commit et on push 
git clean -n -f liste des fichiers à éventuelement nettoyer en local
git clean -f pour forcer le nettoyage
```

``` {style="color:green"}
git stash #remisage : on met de coté les travaux en court pour repartir sur le clean
git stash list
git stash apply ou git stash drop pour virer
```

``` {style="color:green"}
git rebase –skip ou git rebase –abort
```

``` {style="color:green"}
git reset HEAD\~ ← annule le dernier commit
```

``` {style="color:green"}
#revenir à un commit et l'appliquer sur le main 
git log --oneline ##log sur une ligne
git reset --hard <commit hash>
git push -f origin main
```

``` {style="color:green"}
#gestion conflit sur un fichier 
git rebase
#modif du fichier
git add .
git rebase --continue
git push
```

``` {style="color:green"}
git clone https://${GIT_PERSONAL_ACCESS_TOKEN}@github.com/gschone-dgfip/r_conso.git
```

## Linux

Connexion avec un autre user

``` {style="color:green"}
su -l username
```

accès crontab :

``` {style="color:green"}
crontab -e
```

modification droits :

``` {style="color:green"}
chmod 664 « nom du fichier » → Droit de lecture/ecriture au groupe et lecture tous le monde 
```

suppressionr répertoire :

``` {style="color:green"}
rm -r <nom_répertoire> → Supprime le repertoire et tout son contenu .
```

création répertoire :

``` {style="color:green"}
Mkdir <nom dossier> → création repertoire
```

Lister fichier répertoire avec droits :

``` {style="color:green"}
ls -al affiche tous les fichiers / dossiers et les droits
```

Vim :

``` {style="color:green"}
ouvrir fichier : 
vi xxxx.R

sauvegarder : ECHAP + :w
sauvegarder +quitter : ECHAP + :x
quitter sans sauvegarder : ECHAP + :q!
```

Taille des fichiers :

``` {style="color:green"}
du -sh * | sort -hr #liste par taille decroissante les éléments de premier niveau d'un répertoire
du -h -a #liste la taille de tous les éléments d'un répertoire (fichier caché aussi)

find / -type f -size +100M #liste tous les fichiers du répertoire dont la taille est superieure à 100M
```

## Postgres

droits sur une base de données :

``` {style="color:green"}
dbGetQuery(pg, "select a.schemaname, a.tablename, b.usename,
HAS_TABLE_PRIVILEGE(usename, quote_ident(schemaname) 
|| '.' || quote_ident(tablename), 'select') as has_select, 
HAS_TABLE_PRIVILEGE(usename, quote_ident(schemaname) 
|| '.' || quote_ident(tablename), 'insert') as has_insert,
HAS_TABLE_PRIVILEGE(usename, quote_ident(schemaname)
|| '.' || quote_ident(tablename), 'update') as has_update,
HAS_TABLE_PRIVILEGE(usename, quote_ident(schemaname) 
|| '.' || quote_ident(tablename), 'delete') as has_delete, 
HAS_TABLE_PRIVILEGE(usename, quote_ident(schemaname) 
|| '.' || quote_ident(tablename), 'references') as has_references 
from pg_tables a, pg_user b where a.schemaname = 'concession' and a.tablename='concession';")
```

Supprimer le schéma :

``` {style="color:green"}
dbExecute(pgadmin, glue("DROP SCHEMA if exists {schema} cascade"))
```

Taille d'une base :

``` {style="color:green"}
SELECT schema_name, 
       pg_size_pretty(sum(table_size)::bigint)       
FROM (
  SELECT pg_catalog.pg_namespace.nspname as schema_name,
         pg_relation_size(pg_catalog.pg_class.oid) as table_size
  FROM   pg_catalog.pg_class
     JOIN pg_catalog.pg_namespace ON relnamespace = pg_catalog.pg_namespace.oid
) t
GROUP BY schema_name
ORDER BY schema_name
```

## Biblio

Source : Tidy data écrit par Hadley Wickham

La bible de la crontab : <https://crontab.guru/>

Regex : <https://regex101.com/>
:::
